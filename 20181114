import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pandas_datareader.data as wb
import datetime
                    # H.C 불러들이기
input_file = "Human Capital_data.csv"
HC_df = pd.read_csv(input_file, index=date, columns= columns)

ETF1_df = wb.DataReader("069500.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22')  #KODEX 200
ETF2_df = wb.DataReader("091160.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22')  #Kodex Semicon
ETF3_df = wb.DataReader("091170.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22')  #Kodex Banks
ETF4_df = wb.DataReader("091180.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22')  #Kodex Autos
ETF5_df = wb.DataReader("099140.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22')  #KODEX China H
ETF6_df = wb.DataReader("101280.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22')  #KODEX Japan
ETF7_df = wb.DataReader("102780.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22')  #KODEX Samsung Group
ETF8_df = wb.DataReader("102960.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22')  #Kodex Shipbuilding
ETF9_df = wb.DataReader("102970.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22')  #Samsung Kodex Securities ETF - Equity 
ETF10_df = wb.DataReader("114260.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22') #Samsung Kodex Treasury Bond Securities ETF - Bonds
ETF11_df = wb.DataReader("114800.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22') #Samsung Kodex Inverse ETF - Equity-Derivatives 
ETF12_df = wb.DataReader("117460.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22') #Kodex Energy & Chemicals 
ETF13_df = wb.DataReader("117680.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22') #KODEX Steels
ETF14_df = wb.DataReader("117700.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22') #KODEX Constructions 
ETF15_df = wb.DataReader("122630.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22') #Kodex Leverage 
ETF16_df = wb.DataReader("132030.KS",data_source="yahoo",start='2018-02-19',end='2018-03-22') #Samsung KODEX Gold Futures Special Asset ETF - Gold-Derivatives
    # 시가, 종가 어느걸로? & 이거 데이터 불러들이는데 하루 단위인데 일주일 단위로 변환 필요
    
HC_selec = input() # -> H.C 에서 여기서 (-1)을 곱해야 하나?

ETF_df = pd.concat([])    # + H.C
ETF_corr = ETF_df.corr()
ETF_mean = ETF_df.mean()
ETF_std = ETF_df.std()

daily_return=ETF_df.pct_change().dropna()

q1_return = daily_return.mean()*90
q1_cov = daily_return.cov()*90    # why? *90?

pf_returns, pf_volatility, pf_sharpe_ratio, pf_ETF_df_weights = ([] for i in range(4))
num_portfolios =10000
for portfolio in range(num_portfolios):
    weights= np.random.random(n) # n = number of Asset Class
    weights /= np.sum(weights)
    returns = np.dot(weights, q1_return)
    volatility = np.sqrt(np.dot(weights.T, np.dot(q1_cov, weights)))
    sharpe = returns / volatility
    pf_ETF_df_weights.append(weights)
    pf_returns.append(returns)
    pf_volatility.append(volatility)
    pf_sharpe_ratio.append(sharpe)
                                          # 데이터 생성
                                          
                                          
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib notebook
plt.figure(figsize=(15,7))
plt.scatter(x=pf_volatility, y=pf_returns, c=pf_sharpe_ratio, cmap='viridis')
plt.colorbar(label='Sharpe Ratio')
sns.set(style='darkgrid')
plt.title('Efficient Frontier')
plt.xlabel('Volatility')
plt.ylabel('Return')
plt.show()

                                          # 이때까지 나온거에 available pf visual
pf_ETF_df_weights[pf_sharpe_ratio.index(max(pf_sharpe_ratio))]    #최적 포트폴리오


pf_op_returns, pf_op_volatility, pf_op_sharpe_ratio, pf_op_ETF_df_weights = ([] for i in range(4))


